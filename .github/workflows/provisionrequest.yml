#Provisions the infra creation requests on Google Cloud Platform

name: Provision the Infrastructure

on:
# Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

permissions:
    contents: read
    id-token: write

jobs:
  # This workflow contains a single job called "build"
  process_provisioning_request:
    # The type of runner that the job will run on
    runs-on: ubuntu-24.04
    permissions:
        contents: read
        id-token: write

        
    steps:
        - name: Capture Job Start Time
          id: start
          run: |
            echo "JOBSTARTTIME=$(date --utc --iso-8601=seconds)" >> $GITHUB_OUTPUT

        - name: Clone the TF templates directory
          uses: actions/checkout@v2

        - id: auth
          name: Authenticate To Google Cloud
          uses: google-github-actions/auth@v2
          with:
            workload_identity_provider: 'projects/351592443/locations/global/workloadIdentityPools/identity-pool-2/providers/da-idp'
            service_account: '${{ secrets.SERVICE_ACCOUNT }}'
            project_id: '${{ secrets.PROJECT_ID }}'


            

        - name: Setup Cloud SDK
          uses: google-github-actions/setup-gcloud@v2
  
        - name: Use gcloud CLI
          run: gcloud info


        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v2
          with:
            terraform_version: 1.7.5


        - name: Get request details from DB & store it in Shell variables
          id: post_data
          run: |
            echo "ID=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDING | jq -r ".[0].id")" >> $GITHUB_OUTPUT
            echo "COMPONENTS=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDING | jq -r ".[0].components")" >> $GITHUB_OUTPUT
            echo "RESOURCE_EXPIRY_TIME=$(curl http://"${{ secrets.POSTGRES_IP }}"/PENDING | jq -r ".[0].expirytime")" >> $GITHUB_OUTPUT
            echo $ID
            echo $COMPONENTS
            echo $RESOURCE_EXPIRY_TIME
            



        - name: Prepare terraform files
          run: |
            echo ${{ steps.post_data.outputs.ID }}
            cd terraform_templates
            sed -i "s/request_id/${{ steps.post_data.outputs.ID }}/g" main.tf
            
            IFS=','
            read -ra mod_array <<< ${{ steps.post_data.outputs.COMPONENTS }}
            for element in "${mod_array[@]}"; do
              cat references/"$element".txt >> main.tf
            done
            pwd




        - name: Apply Terraform
          id: tf
          run: |
            cd terraform_templates
            export PG_CONN_STR=${{ secrets.PGDBCONNSTR }}
            cat main.tf
            terraform init
            terraform validate
            terraform plan
            terraform apply -auto-approve
            # NOT WORKINGecho "OP=$(terraform output)" >> $GITHUB_OUTPUT



        - name: Update Provisioned Table
          run: |
            cd terraform_templates
            export PG_CONN_STR=${{ secrets.PGDBCONNSTR }}
            curl "http://"${{ secrets.POSTGRES_IP }}"/PROVISIONED" -X POST -H "Content-Type: application/json"  -d "{\"id\": \"${{ steps.post_data.outputs.ID }}\", \"jobstarttime\": \"${{ steps.start.outputs.JOBSTARTTIME }}\", \"jobendtime\": \"$(date --utc --iso-8601=seconds)\" , \"joboutput\": \"abcpqrxyz\",\"resourceexpirytime\":\"${{ steps.post_data.outputs.RESOURCE_EXPIRY_TIME }}\"}"







